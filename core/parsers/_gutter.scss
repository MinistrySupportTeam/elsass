// Copyright (c) 2016-2017 Nicolas Morand (https://twitter.com/NicolasGraph)

// Distributed under the MIT licence (https://opensource.org/licenses/MIT).
// ------------------------------------------------------------------------
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

////
/// @group Misc
////

// 1. _elsass-parse-gutter
// 1.1 _elsass-valid-gutter-from-string
// 1.2 _elsass-valid-gutter-from-list
// 1.3 _elsass-valid-gutter-from-map
// 2. _elsass-parse-gutter-map
// 3. _elsass-alterate-gutter-map

// 1. _elsass-parse-gutter
// -----------------------
/// Validates the $gutter mixin argument;
/// get its related value;
/// associates a value per side in a nested map;
/// alterates this map if any behaviour is used.
///
/// @param {String | List | Map} $gutter -
///   Defines a gutter length.
///   - a global gutter length ratio;
///   - a breakpoint related gutter length ratio
///     as the value of a map using the breakpoint as key;
///   - a breakpoint name as a shorthand of `(breakpoint: 1)`.
///
/// @param {Number | Length} $offset -
///   Number of columns or `<length>`.
///   - `n` defines a default columns number fraction;
///   - `n of n` defines a custom columns number fraction.
//
/// @return {Map}
///
/// @example scss - SCSS
///   margin-right: elsass-gutter(('m': 0.5));
///   margin-left: elsass-gutter(('m': 0.5), 3);

@function _elsass-parse-gutter($gutter) {
  $out: null;

  // Validate $gutter and get the related gutter and/or behaviour values.
  @if type-of($gutter) == string {
    $out: _elsass-get-gutter-from-string($gutter);
  } @else if type-of($gutter) == list {
    $out: _elsass-get-gutter-from-list($gutter);
  } @else if type-of($gutter) == map {
    $out: _elsass-get-gutter-from-map($gutter);
  } @else {
    $clue: type-of($gutter);
    @return _elsass-error(
      '"#{$gutter}" is not a valid value for `$gutter`.',
      '"#{$clue}" as type of value is not valid.',
      'Valid types are: string, list, map'
    );
  }

  $out: _elsass-parse-gutter-map($out...);

  @if map-get($out, 'behaviour') {
    $out: _elsass-alterate-gutter-map($out...);
  }

  @return $out;
}

// 1.1 _elsass-get-gutter-from-string
// ----------------------------------

@function _elsass-get-gutter-from-string($gutter) {
  $out: null;
  $default: _elsass-setting('gutter');

  @if type-of($default) == string {
    $default: map-get($ELSASS-GUTTERS, $default);      
  }

  // $gutter should be 'default', an $elsass-gutters key, $elsass-behaviours key or 'none'.
  @if $gutter == 'default' {
    $out: ('gutter': $default);
  } @else if map-has-key($ELSASS-GUTTERS, $gutter) {
    $out: ('gutter': map-get($ELSASS-GUTTERS, $gutter));
  } @else if map-has-key($ELSASS-BEHAVIOURS, $gutter) or (str_index($behaviour, '-') and map-has-key($ELSASS-BEHAVIOURS, str_slice(#{$gutter}, 1, str_index($behaviour, '-') - 1))) {
    $out: (
      'gutter': $default,
      'behaviour': _elsass-get-behaviour($gutter, $default)
    );
  } @else {
    @return _elsass-error(
      '"#{$gutter}" is not a valid value for `$gutter`:',
      '',
      'Valid values as a string are "default, <gutter>, <behaviour> or none".'
    );
  }

  @return $out;
}

// 1.2 _elsass-get-gutter-from-list
// --------------------------------

@function _elsass-get-gutter-from-list($gutter) {
  $out: null;
  // $gutter should be an $elsass-gutters key followed by an $elsass-behaviours key.
  @if length($gutter) == 2 {
    $first: nth($gutter, 1);
    $second: nth($gutter, 2);
    $type: null;
    @if map-has-key($ELSASS-GUTTERS, $first) {
      $type: map-get($ELSASS-GUTTERS, $first);
      $out: ('gutter': $type);
    } @else {
      $fix: append(("default", ), map-keys($ELSASS-GUTTERS));
      @return _elsass-error(
        '"#{$gutter}" is not a valid value for `$gutter`.',
        '"#{$first}" as the first item is not valid.',
        'Valid values as the first item are: #{$fix}'
      );
    }
    @if map-has-key($ELSASS-BEHAVIOURS, $second) or (str_index($behaviour, '-') and map-has-key($ELSASS-BEHAVIOURS, str_slice(#{$gutter}, 1, str_index($behaviour, '-') - 1))) {
      $out: map-merge($out, ('behaviour': _elsass-get-behaviour($second, $type)));
    } @else {
      $fix: append(("default", ), map-keys($ELSASS-BEHAVIOURS));
      @return _elsass-error(
        '"#{$gutter}" is not a valid value for `$gutter`.',
        '"#{$second}" as the second item is not valid.',
        'Valid values as the second item are: #{$fix}'
      );
    }
  } @else {
    $clue: length($gutter);
    @return _elsass-error(
      '"#{$gutter}" is not a valid value for `$gutter`.',
      '"#{$clue}" as the number of list items is not valid.',
      'Valid number of items in a list is 2'
    );
  }
  
  @return $out;
}

// 1.3 _elsass-get-gutter-from-map
// -------------------------------

@function _elsass-get-gutter-from-map($gutter) {
  // $gutter should be a map or a nested map…
  @each $pos, $vals in $gutter {
    @if $pos != "in" and $pos != "out" and $pos != "silent" {
      @return _elsass-error(
        '"#{$gutter}" is not a valid value for `$gutter`.',
        '"#{$pos}" as key in a  map is not valid.',
        'Valid keys in a nested map are: "in" or "out"'
      );
    } @else if type-of($vals) != map {
      @each $val in $vals {
        @if type-of($val) != number and $val != "none" {
          @return _elsass-error(
            '"#{$gutter}" is not a valid value for `$gutter`.',
            '"#{$val}" as a list item of a map value is not valid.',
            'Valid items in a list as a map value are: "<number>", "none"'
          );
        } 
      }
    } @else {
      @each $side, $val in $vals {
        @if not index($ELSASS-SIDES, $side) {
          @return _elsass-error(
            '"#{$gutter}" is not a valid value for `$gutter`.',
            '"#{$side}" as key in a nested map is not valid.',
            'Valid keys in a nested map are: #{$ELSASS-SIDES}'
          );
        } @else if type-of($val) != number {
          $clue: type-of($val);
          @return _elsass-error(
            '"#{$gutter}" is not a valid value for `$gutter`.',
            '"#{$clue}" is not a valid type of value as a nested map value.',
            'Valid type of nested map values is: number'
          );
        }
      } 
    }
  }
  
  @return ('gutter': $gutter);
}

// 2.2 _elsass-valid-behaviour
// ---------------------------

@function _elsass-get-behaviour($behaviour, $gutter) {
  $out: ('sides': $ELSASS-SIDES);
  $dash: str_index($behaviour, '-');
  $kw: $behaviour;

  @if $dash {
    $sides: str_slice(#{$kw}, $dash + 1);
    @if $sides == 'x' {
      $out: ('sides': 'right' 'left');
    } @else if $sides == 'y' {
      $out: ('sides': 'top' 'bottom');
    } @else if index($sides, $ELSASS-SIDES) {
      $out: ('sides': $sides);
    } @else {
      @return _elsass-error(
        '"#{$gutter}" is not a valid value for `$gutter`.',
        '"#{$sides}" is not a valid behaviour suffix.',
        'Valid behaviour suffixes are: #{$ELSASS-SIDES}, x or y'
      );
    }
    $kw: str_slice(#{$kw}, 1, $dash - 1);
  }

  $gutter-pos: 'out';

  @if map-has-key($gutter, 'in') and map-has-key($gutter, 'out') {
    $gutter-pos: 'in-out';
  } @else if map-has-key($gutter, 'in') {
    $gutter-pos: 'in';
  }

  $out: map-merge($out, ('behaviour': _elsass-map-get($ELSASS-BEHAVIOURS, $kw, $gutter-pos)));

  @return $out;
}

// 2.3 _elsass-parse-gutter
// ----------------------
/// Return a map of side values from the elsass mixin $gutter value.
///
/// @param {List} $gap -
///   Single value or list of two or four values;
///
/// @return {Map | false} Map of side values | false.
///
/// @example scss -
///   _elsass-parse-gutter(false .5);
///   // (top: false, left: .5, bottom: false, $right: .5)

@function _elsass-parse-gutter-map($gutter: null, $behaviour: null, $alt-sides: null) {
  $silent: null;

  // Get gutters map.
  $out: false;

  @each $pos, $vals in $gutter {

    @if not $silent and $pos == 'out' and _elsass-gutter-is-silent($vals) {
      $silent: true;
      $vals: _elsass-gutter-is-silent($vals);
    }

    // Get a four values list from one to four values.
    @if type-of($vals) == number {
      $vals: $vals $vals $vals $vals;
    } @else if type-of($vals) == list {
      @if length($vals) == 2 {
        $vals: nth($vals, 1) nth($vals, 2) nth($vals, 1) nth($vals, 2);
      } @else if length($vals) == 3 {
        $vals: nth($vals, 1) nth($vals, 2) nth($vals, 3) nth($vals, 2);
      }
    }

    // Get a map of sides values.
    @if type-of($vals) == list {
      @each $side in $ELSASS-SIDES {
        $i: index($ELSASS-SIDES, $side);
        $val: nth($vals, $i);
        @if type-of($val) == number {
          $merge: ($side: $val);
          @if $out {
            @if map-has-key($out, $pos) {
              $out: map-merge($out, ($pos: _elsass-map-merge(($out, $pos), $merge)));
            } @else {
              $out: map-merge($out, ($pos: $merge));
            }
          } @else {
            $out: ($pos: $merge);
          }
        }
      }
    } @else {
      $out: ($pos: $vals);
    }
  }

  @return $out;
}

// 2.2 _elsass-gutter-is-silent
// -------------------------
/// Returns a map of needed flex related
/// CSS properties and their values.
///
/// @param {…} $gutter CSS flex-wrap value;
///
/// @return {List | false} Silent gutter value | false.

@function _elsass-gutter-is-silent($gutter: null) {
  $out: false;

  @if $gutter == 'silent' {
    $out: _elsass-setting('gutter');
  } @else if type-of($gutter) == map and map-has-key($gutter, 'silent') {
    $out: map-get($gutter, 'silent');
  }

  @return $out;
}

// 2.4 _elsass-parse-behaviour
// ---------------------------
/// Alterate a map of sides related gutter values
/// according to a define behaviour.
///
/// @param {Map} $gutter -
///   Map of sides related gutter values;
///
/// @param {String} $behaviour -
///   Behaviour related keyword;
///
/// @return {Map} New map of sides related gutter values.

@function _elsass-alterate-gutter-map($gutter, $behaviour, $alt-sides) {
  $out: $gutter;
  $new: null;

  // Alterate values.
  @if $behaviour == 'silent' {
    $out: ('silent': map-get($gutter, 'out'));
  } @else {
    @each $pos, $vals in $behaviour {
      $map: ();
      @each $side in $alt-sides {
        $map: map-merge($map, ($side: $vals));
      }
      $vals: $map;

      $new: ();

      @each $side, $val in $vals {
        $from: null;
        $base: null;
        $alt: $val;
        @if type-of($val) == list {
          $from: nth($val, 1);
          $alt: nth($val, 2);
          @if _elsass-map-get($gutter, $from, $side) {
            $base: _elsass-map-get($gutter, $from, $side);
            $new: map-merge($new, ($side: $base * $alt));
          }
        } @else {
          @if _elsass-map-get($gutter, $pos, $side) {
            @if $val == 'none' {
              $gutter: map-merge($gutter, ($pos: map-remove(map-get($gutter, $pos), $side)));
            } @else {
              $new: map-merge($new, ($side: $alt));
            }
          }
        }
      }
      $merge: if(map-has-key($gutter, $pos), map-get($gutter, $pos), null);
      $alt: ($pos: if($merge, _elsass-map-merge(($gutter, $pos), $new), $new));
      $out: if($out, map-merge($out, $alt), $alt);
    }
    $out: map-merge($gutter, $out);
  }

  @return $out;
}
