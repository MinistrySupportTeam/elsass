// Copyright (c) 2016 Nicolas Morand (https://twitter.com/NicolasGraph)

// Distributed under the MIT licence (https://opensource.org/licenses/MIT).
// ------------------------------------------------------------------------
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

////
/// @group Config
////

// 1. BASE
// 1.1 elsass-global
// 1.2 elsass-responsive
// 1.3 elsass-gutters
// 1.4 elsass-behaviours
// 1.5 elsass-offsets

// 1. BASE
// =======

// 1.1 elsass-global
// -----------------
/// Media-queries agnostic settings.
/// @type Map
/// @prop {Integer} columns -
///   Grid default columns number.
/// @prop {Keyword | Map} gutter -
///   Default gutter value (see `elsass-gutters`).
/// @prop {Length} gutter-length -
///   Gutter length (if not responsive).
/// @prop {Length} container-max-width -
///   Container max-width (if not respsonsive).
$elsass-global: (
  'columns'            : 12,
  'gutter'             : 'all-over',
  'gutter-length'      : null,
  'container-max-width': null,
) !default;

// 1.2 elsass-responsive
// ---------------------
/// Custom breakpoints related settings.
/// @type Map
/// @prop {Map} breakpoint -
///   Custom breakpoint related settings.
/// @prop {Length} breakpoint.device-min-width -
///   Breakpoint related device min-width.
/// @prop {Length} breakpoint.container-max-width -
///   Breakpoint related container max-width (if not defined as a global setting).
/// @prop {Length} breakpoint.gutter-length -
///   Breakpoint related gutter length (if not defined as a global setting).
$elsass-responsive: (
  's': (
    'container-max-width': 480px,
    'gutter-length'      : 24px,
  ),
  'm': (
    'device-min-width'   : 640px,
    'container-max-width': 800px,
    'gutter-length'      : 32px,
  ),
  'l': (
    'device-min-width'   : 1024px,
    'container-max-width': 1000px,
    'gutter-length'      : 40px,
  ),
  'xl': (
    'device-min-width'   : 1440px,
    'container-max-width': 1280px,
    'gutter-length'      : 48px,
  )
) !default;

// 1.3 elsass-gutters
// ------------------
/// Custom gutter related keywords and their values.
/// @type Map
/// @prop {Map} keyword -
///   Related map of `'in'` (padding) and/or `'out'` (margin) gutter values as:  
///   - map(s) of sides related gutter length ratios or `<length>`.
///   - Number or list(s) of up to four gutter length ratios or `<length>`
///     sorted in the same way as the padding or margin shorthand value
///     and where any unwanted side(s) related gutter can be set to `none`;
$elsass-gutters: (
  'above'   : ('out': ('top': 1)),
  'after'   : ('out': ('right': 1)),
  'below'   : ('out': ('bottom': 1)),
  'before'  : ('out': ('left': 1)),
  'x-out'   : ('out': 'none' .5),
  'y-out'   : ('out': .5 'none'),
  'all-out' : ('out': 'none' .5 .1 .5),
  'up'      : ('in' : ('top': 1)),
  'end'     : ('in' : ('right': 1)),
  'down'    : ('in' : ('bottom': 1)),
  'start'   : ('in' : ('left': 1)),
  'x-in'    : ('in' : 'none' .5),
  'y-in'    : ('in' : .5 'none'),
  'all-in'  : ('in' : .5),
  'all-over': ('in' : .25, 'out': 'none' .25 .5 .25)
) !default;

// 1.4 elsass-behaviours
// ---------------------
/// Custom gutter behaviours related keywords and their values.  
/// Docs improvements in process.
/// @type Map
/// @prop {Map} keyword -
///   Related map of changes according to the gutter position(s).
/// @prop {Map} keyword.position -
///   Gutter position related changes.
$elsass-behaviours: (
  'silent'  : (
    'in'    : ('in' : 'none'),
    'out'   : ('silent'),
    'in-out': ('silent')
  ),
  'skip'    : (
    'in'    : ('in' : 'none'),
    'out'   : ('out': 'none'),
    'in-out': ('in' : 'none', 'out': 'none')
  ),
  'collapse': (
    'in'    : ('in' : 0),
    'out'   : ('out': 0),
    'in-out': ('in' : 0, 'out': 0)
  ),
  'nest'    : (
    'in'    : ('out': 'in' -1),
    'in-out': ('out': 'in' -1)
  ),
  'bleed'   : (
    'in'    : ('in': 'in' 2, 'out': 'in' -1),
    'out'   : ('in': 'out' 1, 'out': 'out' -1),
    'in-out': ('in': 'none', 'out': 'out' -1)
  ),
  'fit'     : (
    'in-out': ('in': 'none', 'out': 'out' -1)
  )
) !default;

// 1.5 elsass-gutters
// ------------------
/// Custom offset related keywords and their values.
/// @type Map
/// @prop {Map} keyword -
///   Map of keyword related position and sides.
$elsass-offsets: (
  'before': ('out': 'left'),
  'after' : ('out': 'right'),
  'start' : ('in' : 'left'),
  'end'   : ('in' : 'right'),
  'center': ('out': 'right' 'left'),
  'push'  : ('out': 'left'),
  'pull'  : ('out': 'right')
) !default;

// 1. CONSTANTS
// ============

$ELSASS-COLS         : map-get($elsass-global, 'columns');
$ELSASS-GUTTER       : map-get($elsass-global, 'gutter');
$ELSASS-GUTTER-LENGTH: if(map-has-key($elsass-global, 'gutter-length'), map-get($elsass-global, 'gutter-length'), null);
$ELSASS-MAX-WIDTH    : if(map-has-key($elsass-global, 'container-max-width'), map-get($elsass-global, 'container-max-width'), null);
$ELSASS-BPTS         : map-keys($elsass-responsive); /// Breakpoints list.
$ELSASS-BPT-MIN      : nth($ELSASS-BPTS, 1); /// Smallest breakpoint.
$ELSASS-BPT-MAX      : nth($ELSASS-BPTS, length($ELSASS-BPTS)); /// Bigger breakpoint.
$ELSASS-SIDES        : 'top', 'right', 'bottom', 'left';
$ELSASS-RESP         : $elsass-responsive;
$ELSASS-GUTTERS      : $elsass-gutters;
$ELSASS-BEHAVIOURS   : $elsass-behaviours;
$ELSASS-OFFSETS      : $elsass-offsets;

$elsass-config: () !default;

$elsass-config-reset: (
  'cols': $ELSASS-COLS,
  'bpt' : $ELSASS-BPT-MIN,
  'g-width': 1,
) !default;

$bpt-css: ();
$elsass-css: null !default;
