// Copyright (c) 2016 Nicolas Morand (https://twitter.com/NicolasGraph)

// Distributed under the MIT licence (https://opensource.org/licenses/MIT).
// ------------------------------------------------------------------------
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

////
/// @group Config
////

// 1. BASE
// 1.1 elsass

// 1. BASE
// =======

// 1.1 elsass
// ----------
/// Media-queries agnostic and media-queries related settings.
/// @type Map
/// @prop {Map} global -
///   Media-queries agnostic settings.
/// @prop {Length} global.gutter -
///   Default gutter value.
/// @prop {Length} global.columns -
///   Default columns number.
/// @prop {Length} global.gutter-length -
///   (optional) Media-queries agnostic gutter length.
/// @prop {Length} global.container-max-width -
///   (optional) Media-queries agnostic related container max-width.
/// @prop {Map} responsive -
///   Media-queries related settings.
/// @prop {Map} responsive.bpt -
///   Map of a breakpoint related settings
///   where using the breakpoint name as key.
/// @prop {Length} responsive.bpt.device-min-width -
///   Breakpoint related media-query min-width
///   (also used to calculate the previous breakpoint max-width).  
///   This map item is useless for the smallest breakpoint.
/// @prop {Length} responsive.bpt.container-max-width -
///   (optional) Breakpoint related container max-width.
/// @prop {Length} responsive.bpt.gutter-length -
///   (optional) Breakpoint related gutter length.
$elsass: (
  'global': (                          // Media-queries agnostic settings.
    'columns'            : 12,         // Default columns number
    'gutter'             : 'all-over', // Default gutter value
    'gutter-length'      : null,       // Gutter length.
    'container-max-width': null,       // Max-width to optionally apply to containers.
  ),
  'responsive': (                   // Media-queries related settings.
    's': (                          // Custom breakpoint name.
      'container-max-width': 480px, // Max-width to optionally apply to containers.
      'gutter-length'      : 24px,  // Gutter length.
    ),
    'm': (
      'device-min-width'   : 640px, // Media-query min-width; useless for the first bpt.
      'container-max-width': 800px,
      'gutter-length'      : 32px,
    ),
    'l': (
      'device-min-width'   : 1024px,
      'container-max-width': 1000px,
      'gutter-length'      : 40px,
    ),
    'xl': (
      'device-min-width'   : 1440px,
      'container-max-width': 1280px,
      'gutter-length'      : 48px,
    )
  )
) !default;

// 1.2 elsass-advanced
// -------------------
/// Media-queries agnostic and media-queries related settings.
/// @type Map
/// @prop {Map} gutter -
///   Pre-defined gutter related keywords and their values.
/// @prop {Map} gutter.keyword -
///   related gutter value
/// @prop {behaviour} global.gutter -
///   Pre-defined gutter behaviour related keywords and their values.
$elsass-advanced: (
  'gutter': (
    'above'   : ('out': ('top': 1)),
    'after'   : ('out': ('right': 1)),
    'below'   : ('out': ('bottom': 1)),
    'before'  : ('out': ('left': 1)),
    'x-out'   : ('out': 'no' .5),
    'y-out'   : ('out': .5 'no'),
    'all-out' : ('out': .5),
    'up'      : ('in': ('top': 1)),
    'end'     : ('in': ('right': 1)),
    'down'    : ('in': ('bottom': 1)),
    'start'   : ('in': ('left': 1)),
    'x-in'    : ('in': 'no' .5),
    'y-in'    : ('in': .5 'no'),
    'all-in'  : ('in': .5),
    'all-over': ('in': .25, 'out': .25)
  ),
  'gutter-behaviour': (
    'in': (
      'silent'  : ('in': 'no'),
      'skip'    : ('in': 'no'),
      'collapse': ('in': 0),
      'nest'    : ('out': 'in' -1),
      'bleed'   : ('in': 'in' 2, 'out': 'in' -1)
    ),
    'out': (
      'silent'  : ('silent'),
      'skip'    : ('out': 'no'),
      'collapse': ('out': 0),
      'bleed'   : ('in': 'out' 1, 'out': 'out' -1)
    ),
    'in-out': (
      'silent'  : ('silent'),
      'skip'    : ('in': 'no', 'out': 'no'),
      'collapse': ('in': 0, 'out': 0),
      'nest'    : ('out': 'in' -1),
      'bleed'   : ('in': 'in' 3, 'out': 'in' -1),
      'fit'     : ('in': 'no', 'out': 'out' -1)
    )
  ),
  'offset': (
    'before': ('out': 'left'),
    'after' : ('out': 'right'),
    'start' : ('in': 'left'),
    'end'   : ('in': 'right'),
    'center': ('out': 'right' 'left'),
    'push'  : ('out': 'left'),
    'pull'  : ('out': 'right')
  )
) !default;

// 1. CONSTANTS
// ============

$ELSASS-GLOB       : map-get($elsass, 'global');
$ELSASS-COLS       : map-get($ELSASS-GLOB, 'columns');
$ELSASS-GUTTER     : map-get($ELSASS-GLOB, 'gutter');
$ELSASS-GUTTER-BASE: if(map-has-key($ELSASS-GLOB, 'gutter-length'), map-get($ELSASS-GLOB, 'gutter-length'), null);
$ELSASS-MAX-WIDTH  : if(map-has-key($ELSASS-GLOB, 'container-max-width'), map-get($ELSASS-GLOB, 'container-max-width'), null);
$ELSASS-RESP       : map-get($elsass, 'responsive');
$ELSASS-BPTS       : map-keys($ELSASS-RESP); /// Breakpoints list.
$ELSASS-BPT-MIN    : nth($ELSASS-BPTS, 1); /// Smallest breakpoint.
$ELSASS-BPT-MAX    : nth($ELSASS-BPTS, length($ELSASS-BPTS)); /// Bigger breakpoint.
$ELSASS-SIDES      : 'top', 'right', 'bottom', 'left';
$ELSASS-GUTTERS    : map-get($elsass-advanced, 'gutter');
$ELSASS-BEHAVIOURS : map-get($elsass-advanced, 'gutter-behaviour');
$ELSASS-OFFSETS    : map-get($elsass-advanced, 'offset');



$elsass-config: () !default;

$elsass-config-reset: (
  'cols': $ELSASS-COLS,
  'bpt' : $ELSASS-BPT-MIN,
  'g-width': 1,
) !default;

$bpt-css: ();
$elsass-css: null !default;
