// -----------------------------------------------------------------------------
// Copyright (c) 2016 Nicolas Morand (https://github.com/NicolasGraph)
// Distributed under the MIT licence (https://opensource.org/licenses/MIT).
// -----------------------------------------------------------------------------
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// -----------------------------------------------------------------------------
// 1. Settings
// 2. CSS base
// 3. Mixins
// 4. Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// 1. Settings
// -----------------------------------------------------------------------------

$layout: (
    "s": (                           // Each key is used as a breakpoint.
        "content-max-width" : 480px, // Max-width to optionally apply to containers.
        "vertical-spacing"  : 12px,  // Top and bottom gutters.
        "horizontal-spacing": 8px    // Right and left gutters.
    ),
    "m": (
        "device-min-width"  : 640px, // Media-query min-width.
        "content-max-width" : 800px,
        "vertical-spacing"  : 16px,
        "horizontal-spacing": 12px
    ),
    "l": (
        "device-min-width"  : 1024px,
        "content-max-width" : 1000px,
        "vertical-spacing"  : 24px,
        "horizontal-spacing": 16px
    ),
    "xl": (
        "device-min-width"  : 1440px,
        "content-max-width" : 1280px,
        "vertical-spacing"  : 32px,
        "horizontal-spacing": 24px
    )
);

// -----------------------------------------------------------------------------
// 2. CSS base
// -----------------------------------------------------------------------------

html { box-sizing: border-box; }

html * { box-sizing: inherit; }

// -----------------------------------------------------------------------------
// 3. Mixins
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Generate a media-query.
// @param    $min-width    A $layout key or a CSS min-width value;
// @param    $max-width    A $layout key or a CSS max-width value;
// -----------------------------------------------------------------------------
@mixin breakpoint($min-width: null, $max-width: null) {
    $medias: map-keys($layout);
    $media-query: null;

    @if $min-width {
        // If $min-width is a $layout key; get the related value if it exists.
        @if map-has-key($layout, $min-width) {
            $min-media: map-get($layout, $min-width);
            @if map-has-key($min-media, "device-min-width") {
                $min-width: map-get($min-media, "device-min-width");
            } @else {
                $min-width: null;
            }
        }
        // Set the media-query min-width if defined.
        $media-query: if($min-width, "(min-width: #{$min-width})", null);
    }

    @if $max-width {
        // If $max-width is a $layout key; get the related value.
        @if map-has-key($layout, $max-width) {
            $max-media: map-get($layout, $max-width);
            $max-width: map-get($max-media, "device-min-width") - 1;
        }
        // Add or set the media-query max-width.
        @if $min-width {
            $media-query: $media-query " and (max-width: #{$max-width})";
        } @else {
            $media-query: "(max-width: #{$max-width})";
        }
    }

    // Generate the CSS media-query if it exists.
    @if $media-query {
        @media screen and #{$media-query} {
            @content;
        }
    } @else {
        @content;
    }
}

// -----------------------------------------------------------------------------
// Generate a responsive item.
// @param    $media    $layout key(s) used as the media-query min-width and/or max-width;
// @param    $flow     "row" or "grid";
// @param    $width    A fraction or a factor of the container width,
//                     "max-width" can also be used to generate a width of 100%
//                     and following by a responsive max-width as provided in settings.
// @param    $margin   A;
// @param    $position     "row" or "grid";
// @param    $padding     "row" or "grid";
// -----------------------------------------------------------------------------
@mixin item($media: null, $flow: null, $width: null, $margin: null, $position: null, $padding: null) {

    // Get the media-query related values.
    $min-media: null;
    $min-width: null;
    $max-width: null;

    @if $media {
        @if nth($media, 1) {
            $min-media: map-get($layout, nth($media, 1));
            $min-width: nth($media, 1);
        } @else {
            $min-media: map-get($layout, "s");
        }
        @if type-of($media) == list {
            $max-width: nth($media, 2);
        }
    } @else {
        $min-media: map-get($layout, "s");
    }

    // Generate the media-query.
    @include breakpoint($min-width, $max-width) {

        @if $flow {
            display: flex;
            @if $flow == "grid" {
                flex-wrap: wrap;
            }
        }

        // Generate spacings
        $spacings: (
            padding: $padding,
            margin: $margin
        );

        $spacing-x: map-get($min-media, "horizontal-spacing");
        $spacing-y: map-get($min-media, "vertical-spacing");

        @each $property in map-keys($spacings) {
            $value: map-get($spacings, $property);
            $spacing: spacing($spacing-y, $spacing-x, $value);

            @if $position and $property == "margin" {
                $spacing: position($spacing, $position);
            }

            @if map-has-key($spacing, "global") {
                #{$property}: map-get($spacing, "global");
            } @else {
                @each $side in map-keys($spacing) {
                    #{$property}-#{$side}: map-get($spacing, $side);
                }
            }
        }

        // Generate width calculation.
        @if $width {
            $margin-factor: null;
            @if $margin {
                $spacing: spacing($spacing-x, $spacing-y, $margin);
                @if map-get($spacing, "right") and map-get($spacing, "right") != 0 {
                    $margin-factor: map-get($spacing, "right");
                }
                @if map-get($spacing, "left") and map-get($spacing, "left") != 0 {
                    @if $margin-factor {
                        $margin-factor: $margin-factor + map-get($spacing, "left");
                    } @else {
                        $margin-factor: map-get($spacing, "left");
                    }
                }
            }

            $content-max-width: null;
            $value: null;
            @if $width == "max-width" {
                $value: 100%;
                $content-max-width: map-get($min-media, "content-max-width");
            } @else {
                $value: if($width == 1, 100%, $width * 100%);
            }

            width: if($margin-factor, calc(#{$value} - #{$margin-factor}), #{$value});
            max-width: $content-max-width;
        }

        @content;
    }

    // Add needed media queries related values for missing non explicit queries.
    $medias: map-keys($layout);
    $media: if($media, $media, nth($medias, 1));
    $missing-medias: missing-medias($min-width, $max-width);

    @if $missing-medias {
        @each $missing-media in $missing-medias {
            $index: index($medias, $missing-media);
            @if $index != length($medias) {
                $missing-media: $missing-media nth($medias, $index + 1);
            }
            @include item($missing-media, null, $width, $margin, $position, $padding);
        }
    }
}

// -----------------------------------------------------------------------------
// Generate a media-query.
// @param    $min-width    A $layout key or a CSS min-width value;
// @param    â€¦    A $layout key or a CSS max-width value;
// -----------------------------------------------------------------------------
@mixin children($media: null, $flow: null, $widths: null, $margin: null, $position: null, $padding: null) {

    // Extract the repeat scheme.
    $repeat: null;
    $valid-widths: null;

    @each $width in $widths {
        @if type-of($width) == string {
            $repeat: $width;
        } @else {
            $valid-widths: if($valid-widths, append($valid-widths, $width), $width);
        }
    }
    $widths: $valid-widths;

    // Iterate over $widths.
    $items: length($widths);

    @for $item from 1 through $items {
        // Define the default targeted child.
        $child: #{$items}n+#{$item};
        @if $repeat == "no-repeat" {
            $child: #{$item};
        } @else if $repeat == "repeat-last" {
            $child: if($item != $items, #{$item}, n+#{$item});
        }

        > :nth-child(#{$child}) {
            @include item($media, $flow, nth($widths, $item), $margin, $position, $padding) {
                @content;
            }
        }
    }
}

// -----------------------------------------------------------------------------
// 4. Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Return a map of spacing values from the $spacing mixin argument
// to be used as margins and/or paddings.
// @param     $spacing-y   The default value for vertival spacings;
// @param     $spacing-x   The default value for horizontal spacings;
// @param     $spacing     Mixin argument;
// @return    $spacings    Map of spacing values:
//                         $spacings: (
//                             "global": â€¦, <- optional key for shorthand
//                             "top": â€¦,
//                             "right": â€¦,
//                             "bottom": â€¦,
//                             "left": â€¦
//                          );
// @see       _mixins.scss.
// -----------------------------------------------------------------------------
@function spacing($spacing-y, $spacing-x, $spacing: null) {

    @if type-of($spacing) == list and length($spacing) == 2
        and (not nth($spacing, 1) or not nth($spacing, 2)) {
        // A list of two values can't be used as is if one of the value is false.
        $spacing: nth($spacing, 1) nth($spacing, 2) nth($spacing, 1) nth($spacing, 2);
    }

    $sides: "top", "right", "bottom", "left";
    $spacings: ();
    $new-spacings: ();

    // Iterate over $spacing values.
    @for $index from 1 through length($spacing) {
        $value: nth($spacing, $index);

        @if $value != false {

            // Get the CSS $spacing-value.
            $base: if($index == 1 or $index == 3, $spacing-y, $spacing-x);
            $spacing-value: spacing-value($base, $value);

            // Build the map.
            @if type-of($spacing) == list {

                @if length($spacing) == 2 {
                    $global: null;
                    @if not map-has-key($spacings, "global") {
                        // Set the first shorthand valueâ€¦
                        $global: $spacing-value;
                    } @else {
                        // â€¦or append the second shorthand value.
                        $global: map-get($spacings, "global");
                        @if $global == $spacing-value {
                            $global: $spacing-value;
                        } @else {
                            $global: $global $spacing-value;
                        }
                    }
                    $new-spacings: (
                        #{nth($sides, $index)}: $spacing-value,
                        #{nth($sides, $index + 2)}: $spacing-value,
                        "global": $global
                    );
                } @else {
                    $new-spacings: (
                        #{nth($sides, $index)}: $spacing-value
                    );
                }
                // Merge existing values with new ones.
                $spacings: map-merge($spacings, $new-spacings);

            } @else {
                @each $side in $sides {
                    $base: if($side == "top" or $side == "bottom", $spacing-y, $spacing-x);
                    $value-y: spacing-value($spacing-y, $value);
                    $value-x: spacing-value($spacing-x, $value);
                    $global: if($value-y == $value-x, $value-y, $value-y $value-x);
                    $new-spacings: (
                        $side: spacing-value($base, $value),
                        "global": $global
                    );
                    // Merge existing values with new ones.
                    $spacings: map-merge($spacings, $new-spacings);
                }
            }
        }
    }

    @return $spacings;
}

// -----------------------------------------------------------------------------
// Return a css value from a $spacing mixin argument
// value to be used as a margin and/or padding value.
// @param     $base             A CSS value used a calculation base when needed;
// @param     $value            A $spacing value
// @return    $spacing-value    A CSS margin/padding value;
// @see       spacing().
// -----------------------------------------------------------------------------
@function spacing-value($base, $value) {
    $spacing-value: null;

    @if $value == true {
        // Use the $base value.
        $spacing-value: $base;
    } @else if $value == "nested" {
        // Use $base as a negative value.
        $spacing-value: (-$base);
    } @else if type-of($value) == number and unitless($value) {
        // Use a factor to multiply the $base value.
        $spacing-value: if($value == 0, $value, $value * $base);
    } @else {
        // Ignore $base; use a custom spacing value.
        $spacing-value: $value;
    }

    @return $spacing-value;
}

// -----------------------------------------------------------------------------
// Atlterate margins depending of the $position value.
// @param     $spacings    Map returned by spacing(),
// @param     $position    Mixin argument
// @return    $spacings    Alterated map
// -----------------------------------------------------------------------------
@function position($spacings, $position) {
    $position-side: null;
    $value: null;

    @if type-of($position) == number {
    // $position is a number; use it to alterate the left margin.
        $operator: null;
        // Prepare $position to be added, or soustracted if negative.
        @if $position > 0 {
            $operator: "+";
            $position: $position * 100%;
        } @else {
            $operator: "-";
            $position: (-$position) * 100%;
        }
        $position-side: "left";
        $margin: map-get($spacings, "left");

        @if $margin and $margin != 0 {
            $value: calc(#{$margin} #{$operator} #{$position});
        } @else {
            $value: #{$operator}$position;
        }

    } @else {
    // $position is not a number; use 'auto' to push, pull or center.
        @if $position == "pull" {
            $position-side: "right";
        } @else if $position == "push" {
            $position-side: "left";
        } @else {
            $position-side: "right" "left";
        }
        $value: auto;
    }

    @each $side in $position-side {
        $new-spacings: (#{$side}: #{$value});
        $spacings: map-remove($spacings, $side);
        $spacings: map-merge($spacings, $new-spacings);
    }

    $global: map-get($spacings, "global");
    @if $global {
        // Remove the global spacing value(s).
        $spacings: map-remove($spacings, "global");
        @if type-of($position-side) == list {
            // Reset the global $spacings key using 'auto' for right and left margins.
            @if type-of($global) == list {
                $new-spacings: ("global": nth($global, 1) #{$value});
            } @else {
                $new-spacings: ("global": #{$value});
            }
            $spacings: map-merge($spacings, $new-spacings);
        }
    }

    @return $spacings;
}

// -----------------------------------------------------------------------------
// Return a list of implicit media-queries as $layout keys.
// @param     $min-media        $layout key used as the min-width screen size;
// @param     $min-media        $layout key used as the max-width screen size;
// @return    $missing-medias    A list of implicitly set screen sizes
// @see       _mixins.scss
// -----------------------------------------------------------------------------
@function missing-medias($min-media: null, $max-media: null) {
    $medias: map-keys($layout);
    $from-index: if($min-media, index($medias, $min-media) + 1, 2);
    $to-index: if($max-media, index($medias, $max-media) - 1, length($medias));

    $missing-medias: null;
    @if $to-index - $from-index >= 0 {
        @for $index from $from-index through $to-index {
            @if $missing-medias {
                $missing-medias: append($missing-medias, nth($medias, $index));
            } @else {
                $missing-medias: nth($medias, $index);
            }
        }
    }

    @return $missing-medias;
}
