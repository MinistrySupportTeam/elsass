// Copyright (c) 2016-2017 Nicolas Morand (https://twitter.com/NicolasGraph)

// Distributed under the MIT licence (https://opensource.org/licenses/MIT).
// ------------------------------------------------------------------------
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

////
/// @group Config
////

// 1. SETTINGS
// 1.1 elsass-global
// 1.2 elsass-responsive
// 1.3 elsass-gutters
// 1.4 elsass-behaviours
// 1.5 elsass-offsets

// 1. SETTINGS
// ===========

// 1.1 elsass-global
// -----------------
/// Media-queries agnostic grid settings.
/// @type Map
/// @prop {Integer} columns -
///   Default grid columns number per row.
/// @prop {Keyword | Map} gutter -
///   Default gutter value as an `$elsass-gutters` key or key value.
/// @prop {Length} gutter-length -
///   Gutter `<length>`, if not responsive.
/// @prop {Length} container-max-width -
///   Container `max-width`, if not respsonsive.
$elsass-global: (
  'columns'            : 12,
  'gutter'             : 'all-out', // See $elsass-gutters.
  'gutter-length'      : null, // Overrides reponsive settings if not null.
  'container-max-width': null, // Overrides reponsive settings if not null.
) !default;

// 1.2 elsass-responsive
// ---------------------
/// Custom breakpoints related grid settings
/// sorted by device min-width.
/// @type Map
/// @prop {Map} breakpoint -
///   Custom breakpoint related map of settings.
/// @prop {Length} breakpoint.device-min-width -
///   Breakpoint related device `min-width`.
/// @prop {Length} breakpoint.container-max-width -
///   Breakpoint related container `max-width`, if responsive.
/// @prop {Length} breakpoint.gutter-length -
///   Breakpoint related gutter `<length>`, if responsive.
$elsass-responsive: (
  's': (
    'container-max-width': 480px,
    'gutter-length'      : 16px,
  ),
  'm': (
    'device-min-width'   : 640px,
    'container-max-width': 800px,
    'gutter-length'      : 24px,
  ),
  'l': (
    'device-min-width'   : 960px,
    'container-max-width': 1080px,
    'gutter-length'      : 32px,
  ),
  'xl': (
    'device-min-width'   : 1280px,
    'container-max-width': 1280px,
    'gutter-length'      : 32px,
  )
) !default;

// 1.3 elsass-gutters
// ------------------
/// Custom gutters related keywords and their values.  
/// Allows to easily set a gutter value through `elsass-global`
/// or the `elsass` mixin `$gutter` argument by providing a key.  
/// `none` and `default` keys are *not allowed*.
/// @type Map
/// @prop {Map} gutter -
///   Custom gutter related map of `'in'` (padding)
///   and/or `'out'` (margin) gutter(s).  
///   Each key set accepts one of the following values:
///   - a map of side(s) related gutter length ratios or `<length>`;
///   - a list of up to four gutter length ratios or `<length>`
///     sorted in the same way as the padding or margin shorthand value
///     and where any unwanted side(s) related gutter can be set to `none`;
$elsass-gutters: (
  'above'   : ('out': ('top': 1)), // Uses the full gutter length as the top margin.
  'after'   : ('out': ('right': 1)), // …
  'below'   : ('out': ('bottom': 1)),
  'before'  : ('out': ('left': 1)),
  'outside' : ('out': 'none' .5), // Uses a half gutter length as right and left margins.
  'all-out' : ('out': 'none' .5 1 .5), // Adds a full gutter length as the bottom margin.
  'up'      : ('in' : ('top': 1)), // Uses the full gutter length as the top padding.
  'end'     : ('in' : ('right': 1)), // …
  'down'    : ('in' : ('bottom': 1)),
  'start'   : ('in' : ('left': 1)),
  'inside'  : ('in' : 'none' .5),
  'all-in'  : ('in' : .5),
  'all-over': ('in' : .5, 'out': 'none' .5 1 .5) // Uses paddings and margins.
) !default;

// 1.4 elsass-behaviours
// ---------------------
/// Custom gutter behaviours related keywords and their values.  
/// Allows to easily alterate a gutter value through the `elsass` mixin
/// `$gutter` argument by providing a key.
/// @type Map
/// @prop {Map} behaviour -
///   Custom behaviour related map of changes according to the gutter position(s).
/// @prop {Map} behaviour.gutter-position -
///   Gutter position related changes as a map of `in` and/or `out` changes.  
///   Each key set accepts one of the following values:
///   - `none`: does not apply any gutter;
///   - `<length>`: applies the provided value;
///   - position (+ ratio): applies the position related gutter/gutter ratio.
$elsass-behaviours: (
  'silent'  : (
    'in'    : ('in' : 'none'), // Used when the current gutter is set via the padding.
    'out'   : ('silent'), // Used when the current gutter is set via the margin.
    'in-out': ('silent') // Used when the current gutter is set via padding and margin.
  ),
  'skip'    : (
    'in'    : ('in' : 'none'), // …
    'out'   : ('out': 'none'),
    'in-out': ('in' : 'none', 'out': 'none')
  ),
  'collapse': (
    'in'    : ('in' : 0),
    'out'   : ('out': 0),
    'in-out': ('in' : 0, 'out': 0)
  ),
  'nest'    : (
    'in'    : ('out': 'in' -1),
    'in-out': ('out': 'in' -1)
  ),
  'bleed'   : (
    'in'    : ('in': 'in' 2, 'out': 'in' -1),
    'out'   : ('in': 'out' 1, 'out': 'out' -1),
    'in-out': ('in': 'none', 'out': 'out' -1)
  ),
  'fit'     : (
    'in'    : ('in': 'none'),
    'out'   : ('out': 'out' -1),
    'in-out': ('in': 'none', 'out': 'out' -1)
  )
) !default;

// 1.5 elsass-offsets
// ------------------
/// Custom offset related keywords and their values.  
/// Allows to easily alterate the horizontal element or content position
/// through the `elsass` mixin `$offset` argument by providing a keys.
/// @type Map
/// @prop {Map} offset -
///   Custom offset related value as a map using `in` (padding) or `out` (margin)
///   as the only key and a side or list of sides to alterate as its value.
$elsass-offsets: (
  'before': ('out': 'left'),
  'after' : ('out': 'right'),
  'start' : ('in' : 'left'),
  'end'   : ('in' : 'right'),
  'center': ('out': 'right' 'left')
) !default;
