$layout: (
    s: (
        content-max-width : 480px,
        horizontal-spacing: 15px,
        vertical-spacing  : 10px
    ),
    m: (
        device-min-width  : 640px,
        content-max-width : 690px,
        horizontal-spacing: 20px,
        vertical-spacing  : 15px
    ),
    l: (
        device-min-width  : 1024px,
        content-max-width : 1000px,
        horizontal-spacing: 25px,
        vertical-spacing  : 20px
    ),
    xl: (
        device-min-width  : 1366px,
        content-max-width : 1280px,
        horizontal-spacing: 30px,
        vertical-spacing  : 25px
    )
);



@function spacing-value($base, $value) {
    $spacing-value: null;

    @if $value == true {
        // Spacing uses the base value.
        $spacing-value: $base;
    } @else if $value == "nested" {
        // Spacing uses the base value as a negative value.
        $spacing-value: (-$base);
    } @else if type-of($value) == number and unitless($value) {
        // Spacing uses a factor to multiply the base value.
        $spacing-value: $value * $base;
    } @else {
        // Spacing uses custom spacing value.
        $spacing-value: $value;
    }

    @return $spacing-value;
}

@function spacing($horizontal-spacing, $vertical-spacing, $spacing: null) {
    $values-order: "top", "right", "bottom", "left";

    $spacing-values: ();
    $add-spacing-values: ();

    @for $index from 1 through length($spacing) {
        $value: nth($spacing, $index);

        $base: null;
        @if $index == 1 or $index == 3 {
            $base: $vertical-spacing;
        } @else {
            $base: $horizontal-spacing;
        }

        @if $value != false {
            $spacing-value: spacing-value($base, $value);

            @if type-of($spacing) == list {
                @if length($spacing) == 2 {
                    $global: null;
                    @if map-has-key($spacing-values, "global") {
                        $global: map-get($spacing-values, "global");
                        $global: if($global == $spacing-value, $spacing-value, $global $spacing-value);
                    } @else {
                        $global: $spacing-value;
                    }
                    $add-spacing-values: (
                        #{nth($values-order, $index)}: $spacing-value,
                        #{nth($values-order, $index + 2)}: $spacing-value,
                        "global": $global
                    );
                } @else {
                    $add-spacing-values: (
                        #{nth($values-order, $index)}: $spacing-value
                    );
                }

                $spacing-values: map-merge($spacing-values, $add-spacing-values);

            } @else {
                @each $side in $values-order {
                    @if $side == "top" or $side == "bottom" {
                        $base: $vertical-spacing;
                    } @else {
                        $base: $horizontal-spacing;
                    }

                    $global: null;
                    @if spacing-value($vertical-spacing, $value) == spacing-value($horizontal-spacing, $value) {
                        $global: spacing-value($vertical-spacing, $value);
                    } @else {
                        $global: spacing-value($vertical-spacing, $value) spacing-value($horizontal-spacing, $value);
                    }

                    $add-spacing-values: (
                        $side: spacing-value($base, $value),
                        "global": $global
                    );

                    $spacing-values: map-merge($spacing-values, $add-spacing-values);
                }
            }
        }
    }

    @return $spacing-values;
}

@function missing-medias($media: null) {
    $medias: map-keys($layout);
    $from-index: 1;
    $to-index: length($medias);

    @if $media {
        $from-index: index($medias, nth($media, 1)) + 1;
        $to-index: if(type-of($media) == list, index($medias, nth($media, 2)) - 1, length($medias));
    }

    $missing-medias: null;
    @if $to-index - $from-index >= 0 {
        @for $index from $from-index through $to-index {
            $missing-medias: if($missing-medias, append($missing-medias, nth($medias, $index)), nth($medias, $index));
        }
    }

    @return $missing-medias;
}

@mixin container($media: null, $flex-flow: null, $use-max-width: null, $margin: null, $padding: null) {

    // Get media related variables.
    $medias: map-keys($layout);
    $from-media: null;
    $min-width: null;
    $max-width: null;

    @if $media {
        $from-media: map-get($layout, nth($media, 1));
        $min-width: if(map-has-key($from-media, device-min-width), map-get($from-media, device-min-width), null);
        @if type-of($media) == list {
            $to-media: map-get($layout, nth($media, 2));
            $max-width: map-get($to-media, device-min-width);
        }
    } @else {
        $from-media: map-get($layout, nth($medias, 1));
    }

    > * { box-sizing: border-box; }

    // Generate CSS.
    @include breakpoint($min-width, $max-width) {
        display: flex;

        @if $flex-flow {
            flex-flow: $flex-flow;
        }

        // Generate spacings
        $spacings: (
            padding: $padding,
            margin : $margin
        );

        $spacing: null;

        @each $property in map-keys($spacings) {
            $value: map-get($spacings, $property);
            @if $value {
                $horizontal-spacing: map-get($from-media, horizontal-spacing);
                $vertical-spacing: map-get($from-media, vertical-spacing);
                $spacing: spacing($horizontal-spacing, $vertical-spacing, $value);

                @if map-has-key($spacing, "global") {
                    #{$property}: map-get($spacing, "global");
                } @else {
                    @each $side in map-keys($spacing) {
                        #{$property}-#{$side}: map-get($spacing, $side);
                    }
                }
            }
        }

        // Generate width calculation.
        @if $use-max-width {
            $max-width: map-get($from-media, content-max-width);
            @if $margin {
                $margin-factor: null;
                @if map-get($spacing, "right") {
                    $margin-factor: map-get($spacing, "right");
                }
                @if map-get($spacing, "left") {
                    $margin-factor: if($margin-factor, $margin-factor + map-get($spacing, "left"), map-get($spacing, "left"));
                }
                max-width: calc(#{$max-width} - #{$margin-factor});
            } @else {
                max-width: $max-width;
            }
        }

        @content;
    }

    // Add missing medias.
    $media: if($media, $media, nth($medias, 1));
    $missing-medias: missing-medias($media);

    @if $missing-medias {
        @each $missing-media in $missing-medias {
            $index: index($medias, $missing-media);

            @if $index != length($medias) {
                $missing-media: $missing-media nth($medias, $index + 1);
            }

            @include container($missing-media, false, $use-max-width, $margin, $padding);
        }
    }
}

@mixin breakpoint($min-width: null, $max-width: null) {
    @if $min-width and $max-width {
        @media screen and (min-width: $min-width) and (max-width: $max-width - 1) {
            @content;
        }
    } @else if $min-width {
        @media screen and (min-width: $min-width) {
            @content;
        }
    } @else if $max-width {
        @media screen and (max-width: $max-width) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin items($media: null, $col-width: null, $margin: null, $padding: null) {

    $repeat: null;
    $widths: null;

    @for $item from 1 through length($col-width) {
        $width: nth($col-width, $item);
        @if type-of($width) == string {
            $repeat: $width;
        } @else {
            $widths: if($widths, append($widths, $width), $width);
        }
    }

    $items: length($widths);

    @if $repeat == "no-repeat" {
        @for $item from 1 through $items {
            > :nth-child(#{$item}) {
                @include item($media, nth($col-width, $item), $margin, $padding) {
                    @content
                }
            }
        }
    } @else if $repeat == "repeat-last" {
         @for $item from 1 through $items {
            @if $item != $items {
                > :nth-child(#{$item}) {
                    @include item($media, nth($col-width, $item), $margin, $padding) {
                        @content
                    }
                }
            } @else {
                > :nth-child(n+#{$item}) {
                    @include item($media, nth($col-width, $item), $margin, $padding) {
                        @content
                    }
                }
            }
        }
    } @else {
        @for $item from 1 through $items {
            > :nth-child(#{$items}n+#{$item}) {
                @include item($media, nth($col-width, $item), $margin, $padding) {
                    @content
                }
            }
        }
    }
}

@mixin item($media: null, $col-width: null, $margin: null, $padding: null) {

    $medias: map-keys($layout);

    // Get media query min and max widths.
    $from-media: null;
    $min-width: null;
    $max-width: null;

    @if $media {
        $from-media: map-get($layout, nth($media, 1));
        $min-width: if(map-has-key($from-media, device-min-width), map-get($from-media, device-min-width), null);
        @if type-of($media) == list {
            $to-media: map-get($layout, nth($media, 2));
            $max-width: map-get($to-media, device-min-width);
        }
    } @else {
        $from-media: map-get($layout, nth($medias, 1));
    }

    // Media query wrapper
    @include breakpoint($min-width, $max-width) {

        // Generate spacings
        $spacings: (
            padding: $padding,
            margin : $margin
        );

        $spacing: null;

        @each $property in map-keys($spacings) {
            $value: map-get($spacings, $property);
            @if $value {
                $horizontal-spacing: map-get($from-media, horizontal-spacing);
                $vertical-spacing: map-get($from-media, vertical-spacing);
                $spacing: spacing($horizontal-spacing, $vertical-spacing, $value);

                @if map-has-key($spacing, "global") {
                    #{$property}: map-get($spacing, "global");
                } @else {
                    @each $side in map-keys($spacing) {
                        #{$property}-#{$side}: map-get($spacing, $side);
                    }
                }
            }
        }

        // Generate width calculation.
        @if $col-width {
            @if $margin {
                $margin-factor: null;
                @if map-get($spacing, "right") {
                    $margin-factor: map-get($spacing, "right");
                }
                @if map-get($spacing, "left") {
                    $margin-factor: if($margin-factor, $margin-factor + map-get($spacing, "left"), map-get($spacing, "left"));
                }
                width: calc(#{$col-width} * 100% - #{$margin-factor});
            } @else {
                width: $col-width * 100%;
            }
        }

        @content;
    }

    // Add needed media queries related values for missing non explicit queries.
    $media: if($media, $media, nth($medias, 1));
    $missing-medias: missing-medias($media);

    @if $missing-medias {
        @each $missing-media in $missing-medias {
            $index: index($medias, $missing-media);

            @if $index != length($medias) {
                $missing-media: $missing-media nth($medias, $index + 1);
            }

            @include item($missing-media, $col-width, $margin, $padding);
        }
    }
}

.my-grid {
    @include container(false, row wrap, true, 10px 11px, 22) {
        background: #e9edf5;
    };

    @include items("s" "m", 1, true, true);
    @include items("m" "l", 1/4, true, true);
    @include items("l", 1/4 1/8 repeat-last, true, true);
    @include items() {
        background: #d7dfed;
    }

    .item--half {
        @include item("m" "l", 3/4, true nest true false);
        @include item("l", 1/2, false nest nest true);
        background: #c5d1e5;
    }

    .item--last {
        @include item("l", false, true false true auto) {
            background: #b3c3dd;
        };
    }
}
