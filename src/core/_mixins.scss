// -----------------------------------------------------------------------------
// Copyright 2016 Nicolas Morand (https://github.com/NicolasGraph)
// -----------------------------------------------------------------------------
// This file is part of oui_grid,
// a software distributed under the MIT licence
// See https://opensource.org/licenses/MIT for more informations.
// -----------------------------------------------------------------------------
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// ---------------------------------------------------------------
// Generate a media-query.
// @param    $min-width    A $layout key or a CSS min-width value;
// @param    $max-width    A $layout key or a CSS max-width value;
// ---------------------------------------------------------------
@mixin breakpoint($min-width: null, $max-width: null) {

    @if $min-width and type-of($min-width) == string or $max-width and type-of($max-width) == string {
        $medias: map-keys($layout);

        @if $min-width and type-of($min-width) == string  {
            $from-media: map-get($layout, $min-width);
            $min-width: if(map-has-key($from-media, device-min-width), map-get($from-media, device-min-width), null);
        }

        @if $max-width and type-of($max-width) == string {
            $to-media: map-get($layout, $max-width);
            $max-width: map-get($to-media, device-min-width) - 1;
        }
    }

    @if $min-width and $max-width {
        @media screen and (min-width: $min-width) and (max-width: $max-width) {
            @content;
        }
    } @else if $min-width {
        @media screen and (min-width: $min-width) {
            @content;
        }
    } @else if $max-width {
        @media screen and (max-width: $max-width) {
            @content;
        }
    } @else {
        @content;
    }
}

// --------------------------------------------------------------------------------------
// Generate a responsive item.
// @param    $media    $layout key(s) used as the media-query min-width and/or max-width;
// @param    $flow     "row" or "grid";
// @param    $width    A fraction or a factor of the container width,
//                     "max-width" can also be used to generate a width of 100%
//                     and following by a responsive max-width as provided in settings.
// @param    $margin   A;
// @param    $position     "row" or "grid";
// @param    $padding     "row" or "grid";
// --------------------------------------------------------------------------------------
@mixin item($media: null, $flow: null, $width: null, $margin: null, $position: null, $padding: null) {
    $from-media: null;
    $min-width: null;
    $max-width: null;

    @if $media {
        @if nth($media, 1) {
            $from-media: map-get($layout, nth($media, 1));
            $min-width: nth($media, 1);
        } @else {
            $from-media: map-get($layout, "s");
        }
        @if type-of($media) == list {
            $max-width: nth($media, 2);
        }
    } @else {
        $from-media: map-get($layout, "s");
    }

    // Media query wrapper
    @include breakpoint($min-width, $max-width) {

        @if $flow {
            display: flex;
            @if $flow == grid {
                flex-wrap: wrap;
            }
        }

        // Generate spacings
        $spacings: (
            padding: $padding,
            margin: $margin
        );

        $spacing-x: null;
        $spacing-y: null;

        @each $property in map-keys($spacings) {
            $value: map-get($spacings, $property);
                $spacing-x: map-get($from-media, "horizontal-spacing");
                $spacing-y: map-get($from-media, "vertical-spacing");
                $spacing: null;
                $spacing: spacing($spacing-y, $spacing-x, $value);

                @if $position and $property == "margin" {
                    $spacing: position($spacing, $position);
                }

                @if map-has-key($spacing, "global") {
                    #{$property}: map-get($spacing, "global");
                } @else {
                    @each $side in map-keys($spacing) {
                        #{$property}-#{$side}: map-get($spacing, $side);
                    }
                }

        }

        // Generate width calculation.
        @if $width {

            $margin-factor: null;
            @if $margin {
                $spacing: spacing($spacing-x, $spacing-y, $margin);
                @if map-get($spacing, "right") and map-get($spacing, "right") != 0 {
                    $margin-factor: map-get($spacing, "right");
                }
                @if map-get($spacing, "left") and map-get($spacing, "left") != 0 {
                    $margin-factor: if($margin-factor, $margin-factor + map-get($spacing, "left"), map-get($spacing, "left"));
                }
            }

            $content-max-width: null;
            $value: null;
            @if $width == "max-width" {
                $value: 100%;
                $content-max-width: map-get($from-media, content-max-width);
            } @else {
                $value: if($width == 1, 100%, $width * 100%);
            }

            width: if($margin-factor, calc(#{$value} - #{$margin-factor}), #{$value});
            max-width: $content-max-width;

        }

        @content;
    }

    // Add needed media queries related values for missing non explicit queries.
    $medias: map-keys($layout);
    $media: if($media, $media, nth($medias, 1));
    $missing-medias: missing-medias($min-width, $max-width);

    @if $missing-medias {
        @each $missing-media in $missing-medias {
            $index: index($medias, $missing-media);
            @if $index != length($medias) {
                $missing-media: $missing-media nth($medias, $index + 1);
            }
            @include item($missing-media, null, $width, $margin, $position, $padding);
        }
    }
}

// ---------------------------------------------------------------
// Generate a media-query.
// @param    $min-width    A $layout key or a CSS min-width value;
// @param    â€¦    A $layout key or a CSS max-width value;
// ---------------------------------------------------------------
@mixin children($media: null, $flow: null, $widths: null, $margin: null, $position: null, $padding: null) {

    $repeat: null;
    $valid-widths: null;

    @for $item from 1 through length($widths) {
        $width: nth($widths, $item);
        @if type-of($width) == string {
            $repeat: $width;
        } @else {
            $valid-widths: if($valid-widths, append($valid-widths, $width), $width);
        }
    }

    $widths: $valid-widths;
    $items: length($widths);
    @for $item from 1 through $items {
        $child: #{$items}n+#{$item};
        @if $repeat == "no-repeat" {
            $child: #{$item};
        } @else if $repeat == "repeat-last" {
            $child: if($item != $items, #{$item}, n+#{$item});
        }
        > :nth-child(#{$child}) {
            @include item($media, $flow, nth($widths, $item), $margin, $position, $padding) {
                @content;
            }
        }
    }
}
