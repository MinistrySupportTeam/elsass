@mixin breakpoint($min-width: null, $max-width: null) {
    @if $min-width and $max-width {
        @media screen and (min-width: $min-width) and (max-width: $max-width - 1) {
            @content;
        }
    } @else if $min-width {
        @media screen and (min-width: $min-width) {
            @content;
        }
    } @else if $max-width {
        @media screen and (max-width: $max-width) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin children($media: null, $widths: null, $margin: null, $position: null, $flow: null) {

    $repeat: null;
    $valid-widths: null;

    @for $item from 1 through length($widths) {
        $width: nth($widths, $item);
        @if type-of($width) == string {
            $repeat: $widths;
        } @else {
            $valid-widths: if($valid-widths, append($valid-widths, $width), $width);
        }
    }

    $widths: $valid-widths;
    $items: length($widths);

    @if $repeat == "no-repeat" {
        @for $item from 1 through $items {
            > :nth-child(#{$item}) {
                @include item($media, nth($widths, $item), $margin, $position, $flow) {
                    @content
                }
            }
        }
    } @else if $repeat == "repeat-last" {
         @for $item from 1 through $items {
            @if $item != $items {
                > :nth-child(#{$item}) {
                    @include item($media, nth($widths, $item), $margin, $position, $flow) {
                        @content
                    }
                }
            } @else {
                > :nth-child(n+#{$item}) {
                    @include item($media, nth($widths, $item), $margin, $position, $flow) {
                        @content
                    }
                }
            }
        }
    } @else {
        @for $item from 1 through $items {
            > :nth-child(#{$items}n+#{$item}) {
                @include item($media, nth($widths, $item), $margin, $position, $flow) {
                    @content
                }
            }
        }
    }
}

@mixin item($media: null, $width: null, $margin: null, $position: null, $flow: null) {

    $medias: map-keys($layout);

    // Get media query min and max widths.
    $from-media: null;
    $to-media: null;
    $min-width: null;
    $max-width: null;

    @if $media {
        $from-media: map-get($layout, nth($media, 1));
        $min-width: if(map-has-key($from-media, device-min-width), map-get($from-media, device-min-width), null);
        @if type-of($media) == list {
            $to-media: map-get($layout, nth($media, 2));
            $max-width: map-get($to-media, device-min-width);
        }
    } @else {
        $from-media: map-get($layout, nth($medias, 1));
    }

    // Media query wrapper
    @include breakpoint($min-width, $max-width) {

        @if $flow {
            display: flex;
                > * { box-sizing: border-box; }

            @if $flow == grid {
                flex-wrap: wrap;
            }
        }

        // Generate spacings
        $spacings: (
            margin: $margin,
        );

        $horizontal-spacing: null;
        $vertical-spacing: null;

        @each $property in map-keys($spacings) {
            $value: map-get($spacings, $property);
            @if $value {
                $horizontal-spacing: map-get($from-media, horizontal-spacing);
                $vertical-spacing: map-get($from-media, vertical-spacing);
                $spacing: spacing($horizontal-spacing, $vertical-spacing, $value, $position);

                @if map-has-key($spacing, "global") {
                    #{$property}: map-get($spacing, "global");
                } @else {
                    @each $side in map-keys($spacing) {
                        #{$property}-#{$side}: map-get($spacing, $side);
                    }
                }
            }
        }

        // Generate width calculation.
        @if $width {
          $property: null;
          @if $width == true {
            $property: max-width;
            $width: map-get($to-media, device-min-width);
          } @else {
            $property: width;
            $width: #{$width} * 100%;
          }
            @if $margin {
                $spacing: spacing($horizontal-spacing, $vertical-spacing, $margin);
                $margin-factor: null;
                @if map-get($spacing, "right") {
                    $margin-factor: map-get($spacing, "right");
                }
                @if map-get($spacing, "left") {
                    $margin-factor: if($margin-factor, $margin-factor + map-get($spacing, "left"), map-get($spacing, "left"));
                }
                #{$property}: calc(#{$width} - #{$margin-factor});
            } @else {
                #{$property}: $width;
            }
        }

        @content;
    }

    // Add needed media queries related values for missing non explicit queries.
    $media: if($media, $media, nth($medias, 1));
    $missing-medias: missing-medias($media);

    @if $missing-medias {
        @each $missing-media in $missing-medias {
            $index: index($medias, $missing-media);

            @if $index != length($medias) {
                $missing-media: $missing-media nth($medias, $index + 1);
            }

            @include item($missing-media, $width, $margin, $position);
        }
    }
}
