// Copyright (c) 2016 Nicolas Morand (https://twitter.com/NicolasGraph)

// Distributed under the MIT licence (https://opensource.org/licenses/MIT).
// -----------------------------------------------------------------------------
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// 1. Settings
// 1.1 Default mixin argument values
// 2. Mixin
// 2.1 children

// 1. Settings
// ===========

// 1.1 Default mixin argument values
// ---------------------------------
$elsass-children: (
  'media'     : $BPT-MIN,
  'flow'      : null,
  'width'     : 1,
  'gutter-in' : .5,
  'gutter-out': .5,
  'position'  : null,
) !default;

// 2. Mixin
// ========

// 2.1 children
// ------------
// Generate whatever responsive element you need.
// @param  $media       Breakpoint(s);
// @param  $flow        "flex-row", "flex-grid" or false;
// @param  $widths      Ratio(s) of the container width
//                      optionally followed by a repeat scheme:
//                      "repeat" (default), "repeat-first", "repeat-last";
// @param  $gutter-in   Padding value(s) or ratio(s) of the breakpoint spacings;
// @param  $gutter-out  Margin value(s) or ratio(s) of the breakpoint spacings;
// @param  $position    "pull", "push", "center" or ratio of the container width.
@mixin elsass-children(
  $media     : null,
  $flow      : null,
  $widths    : null,
  $gutter-in : null,
  $gutter-out: null,
  $position  : null)
{

  // Set/reset arguments according to values/default values.
  $args: (
    'media'     : $media,
    'flow'      : $flow,
    'widths'    : $widths,
    'gutter-in' : $gutter-in,
    'gutter-out': $gutter-out,
    'position'  : $position,
  );

  $default: null;

  @each $arg, $val in $args {
    @if ($val == true or $val == '…') or ($val == null and $default) {
      $args: map-merge($args, ($arg: map-get($elsass-children, $arg)));
      @if not $default and $val == '…' {
        $default: true;
      }
    }
  }

  $media     : map-get($args, 'media');
  $flow      : map-get($args, 'flow');
  $widths    : map-get($args, 'width');
  $gutter-in : map-get($args, 'gutter-in');
  $gutter-out: map-get($args, 'gutter-out');
  $position  : map-get($args, 'position');

  // Separate valid widths from the optional repeat scheme.
  $repeat: null;
  $valid-widths: null;

  @each $width in $widths {
    @if type-of($width) == string {
      $repeat: $width;
    } @else {
      $valid-widths: if($valid-widths, append($valid-widths, $width), $width);
    }
  }

  $widths: $valid-widths;

  // Iterate over $widths to call elsass mixin on defined children.
  $children: length($widths);

  @for $child from 1 through $children {
    $nth: ':nth-child(#{$children}n+#{$child})'; // Default targeted child.

    @if $repeat == "no-repeat" {
      $nth: $child;
    } @else if $repeat == "repeat-first" {
      $nth: if($child == $children, ':last-child', ':nth-child(n+#{$child})');
    } @else if $repeat == "repeat-last" {
      $nth: if($child != $children, ':first-child', ':nth-child(n+#{$child})');
    }

    #{$nth} {
      $width: nth($widths, $child);
      @include elsass($media, $flow, $width, $gutter-in, $gutter-out, $position) {
        @content;
      }
    }
  }
}
