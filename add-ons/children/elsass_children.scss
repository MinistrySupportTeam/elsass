// -----------------------------------------------------------------------------
// Copyright (c) 2016 Nicolas Morand (https://twitter.com/NicolasGraph)
// -----------------------------------------------------------------------------

// Distributed under the MIT licence (https://opensource.org/licenses/MIT).
// -----------------------------------------------------------------------------
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// children
// -----------------------------------------------------------------------------
// Generate whatever responsive element you need.
// @param  $media       Breakpoint(s);
// @param  $flow        "flex-row", "flex-grid" or false;
// @param  $widths      Ratio(s) of the container width
//                      optionally followed by a repeat scheme:
//                      "repeat" (default), "repeat-first", "repeat-last";
// @param  $gutter-in   Padding value(s) or ratio(s) of the breakpoint spacings;
// @param  $gutter-out  Margin value(s) or ratio(s) of the breakpoint spacings;
// @param  $position    "pull", "push", "center" or ratio of the container width.
// -----------------------------------------------------------------------------
@mixin children(
    $media: null,
    $flow: null,
    $widths: null,
    $gutter: null,
    $position: null,
    $padding: null) {

    // Separate valid widths from the optional repeat scheme.
    $repeat: null;
    $valid-widths: null;

    @each $width in $widths {
        @if type-of($width) == string {
            $repeat: $width;
        } @else {
            $valid-widths: if($valid-widths, append($valid-widths, $width), $width);
        }
    }

    $widths: $valid-widths;

    // Iterate over $widths to call elsass mixin on defined children.
    $children: length($widths);

    @for $child from 1 through $children {
        $nth: #{$children}n+#{$child}; // Default targeted child.
        @if $repeat == "no-repeat" {
            $nth: #{$child};
        } @else if $repeat == "repeat-last" {
            $nth: if($child != $children, #{$child}, n+#{$child});
        }

        > :nth-child(#{$nth}) {
            $width: nth($widths, $child);
            @include elsass($media, $flow, $width, $gutter, $position, $padding) {
                @content;
            }
        }
    }
}
